# Buy not build

There is no value in building software that we can buy, favour COTs products over self builds (but avoid vendor lock in)
When buying software prefer SaaS over self hosting
Software should do one thing and do it really well, avoid sprawling software and vertical lock-ins
When buying software to integrate choose products with a versioned, ReST API

# People and Teams

Small empowered teams are the best way to build software, make them responsible for the operation as well as the build
Keep permanent teams small and coherent, flex up with contractors when needed.  Avoid having permanent teams do low value work
The best people are T-shaped, broad knowledge with one or two deep specialisms
Teams should be long-lived and organised around clearly delineated areas of functionality optimised to remove cross-team dependencies.
Work should be assigned to teams, never teams to work.  If there's new class of work you probably need a new team.

# Architecture

Create complexity by composition of simple services not through monolithic applications
Avoid direct coupling between components in a system, abstractions provide flexibility
Keep the number of technologies small, this reduces complexity and allows engineers to move between teams more easily
Challenge the status quo, avoid Maslow's Hammer situations, keep moving the technology forward

# Development

Automate everything - build, test, deployment, infrastructure, monitoring
Build to operate from day 1: favour operational and automation stories over functional stories at the beginning of a project
Software only has value once real users are using it - ship early, ship often, track your KPIs
When building software favour open source tools and frameworks over propreitory ones
Teams should always prioritise on preventing defects, and where defects are found, fixing them over adding new features.

# Governance and delivery

Don't commit to dates unless they can be backed up with data.  Don't succumb to stakeholder pressure and make up dates.  If pressed give a range.
Cost, scope, time.  You can only ever fix two of these the third will need to flex.  Quality is non-negotiable.
Good enough is good enough, with a few exceptions don't gold plate, video playback should be solid gold, everything else is debatable
Defer decisions to the last possible moment. Decisions made ahead of time may be outdated by the time they are actually needed.


